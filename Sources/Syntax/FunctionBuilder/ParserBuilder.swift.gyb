%{ import itertools }%
import Foundation

@resultBuilder
public struct ParserBuilder { }

extension ParserBuilder {
    public static func buildEither<A : Parser, B : Parser>(first: A) -> IfElseConditionalParser<A, B> {
        return IfElseConditionalParser(first)
    }

    public static func buildEither<A : Parser, B : Parser>(second: B) -> IfElseConditionalParser<A, B> {
        return IfElseConditionalParser(second)
    }
}

extension ParserBuilder {

    public static func buildBlock() -> EmptyParser {
        return EmptyParser()
    }

    public static func buildBlock<T : Parser>(_ a: T) -> T {
        return a
    }

}

extension ParserBuilder {

    % for num_components in range(2, 11):
%{
        combinations = itertools.product([True, False], repeat=num_components)
        indices = range(0, num_components)
}%
    % for combination in combinations:
%{
        generic_names_in = ['C{}'.format(idx) for idx in indices if combination[idx]]
        generics = ', '.join(generic_names_in)
        types = ['any Parser<C{}>'.format(idx) if combination[idx] else 'any Parser<Void>' for idx in indices]

        param_names = ['c{}'.format(idx) for idx in indices]
        params = ', '.join(['_ {}: {}'.format(param, type) for param, type in zip(param_names, types)])
        ctor_param_expressions = ['{}.internalParserBuilder()'.format(param) for param in param_names]
        ctor_type_param_expressions = ', '.join(['{}.self'.format(type) for type in generic_names_in])

        tuple_ctor_args = ', '.join(ctor_param_expressions)
}%
    % if len(generic_names_in) == 0:
    public static func buildBlock(${params}) -> TupleParser<Void> {
    % elif len(generic_names_in) == 1:
    public static func buildBlock<${generics}>(${params}) -> TupleParser<${generics}> {
    % else:
    public static func buildBlock<${generics}>(${params}) -> TupleParser<(${generics})> {
    % end
        return TupleParser(builders: [${tuple_ctor_args}],
                           outputTypes: [${ctor_type_param_expressions}])
    }

    % end
    % end
}
