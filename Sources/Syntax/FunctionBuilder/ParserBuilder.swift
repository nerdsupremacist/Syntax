import Foundation

@resultBuilder
public struct ParserBuilder { }

extension ParserBuilder {
    public static func buildEither<A : Parser, B : Parser>(first: A) -> IfElseConditionalParser<A, B> {
        return IfElseConditionalParser(first)
    }

    public static func buildEither<A : Parser, B : Parser>(second: B) -> IfElseConditionalParser<A, B> {
        return IfElseConditionalParser(second)
    }
}

extension ParserBuilder {

    public static func buildBlock() -> EmptyParser {
        return EmptyParser()
    }

    public static func buildBlock<T : Parser>(_ a: T) -> T {
        return a
    }

}

extension ParserBuilder {

    public static func buildBlock<C0, C1>(_ c0: any Parser<C0>, _ c1: any Parser<C1>) -> TupleParser<(C0, C1)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self])
    }

    public static func buildBlock<C0>(_ c0: any Parser<C0>, _ c1: any Parser<Void>) -> TupleParser<C0> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder()],
                           outputTypes: [C0.self])
    }

    public static func buildBlock<C1>(_ c0: any Parser<Void>, _ c1: any Parser<C1>) -> TupleParser<C1> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder()],
                           outputTypes: [C1.self])
    }

    public static func buildBlock(_ c0: any Parser<Void>, _ c1: any Parser<Void>) -> TupleParser<Void> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder()],
                           outputTypes: [])
    }

    public static func buildBlock<C0, C1, C2>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>) -> TupleParser<(C0, C1, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self])
    }

    public static func buildBlock<C0, C1>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>) -> TupleParser<(C0, C1)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self])
    }

    public static func buildBlock<C0, C2>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>) -> TupleParser<(C0, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self])
    }

    public static func buildBlock<C0>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>) -> TupleParser<C0> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder()],
                           outputTypes: [C0.self])
    }

    public static func buildBlock<C1, C2>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>) -> TupleParser<(C1, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self])
    }

    public static func buildBlock<C1>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>) -> TupleParser<C1> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder()],
                           outputTypes: [C1.self])
    }

    public static func buildBlock<C2>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>) -> TupleParser<C2> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder()],
                           outputTypes: [C2.self])
    }

    public static func buildBlock(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>) -> TupleParser<Void> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder()],
                           outputTypes: [])
    }

    public static func buildBlock<C0, C1, C2, C3>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>) -> TupleParser<(C0, C1, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self])
    }

    public static func buildBlock<C0, C1, C2>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>) -> TupleParser<(C0, C1, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self])
    }

    public static func buildBlock<C0, C1, C3>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>) -> TupleParser<(C0, C1, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self])
    }

    public static func buildBlock<C0, C1>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>) -> TupleParser<(C0, C1)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self])
    }

    public static func buildBlock<C0, C2, C3>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>) -> TupleParser<(C0, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self])
    }

    public static func buildBlock<C0, C2>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>) -> TupleParser<(C0, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self])
    }

    public static func buildBlock<C0, C3>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>) -> TupleParser<(C0, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self])
    }

    public static func buildBlock<C0>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>) -> TupleParser<C0> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder()],
                           outputTypes: [C0.self])
    }

    public static func buildBlock<C1, C2, C3>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>) -> TupleParser<(C1, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self])
    }

    public static func buildBlock<C1, C2>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>) -> TupleParser<(C1, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self])
    }

    public static func buildBlock<C1, C3>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>) -> TupleParser<(C1, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self])
    }

    public static func buildBlock<C1>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>) -> TupleParser<C1> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder()],
                           outputTypes: [C1.self])
    }

    public static func buildBlock<C2, C3>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>) -> TupleParser<(C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self])
    }

    public static func buildBlock<C2>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>) -> TupleParser<C2> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder()],
                           outputTypes: [C2.self])
    }

    public static func buildBlock<C3>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>) -> TupleParser<C3> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder()],
                           outputTypes: [C3.self])
    }

    public static func buildBlock(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>) -> TupleParser<Void> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder()],
                           outputTypes: [])
    }

    public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>) -> TupleParser<(C0, C1, C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C1, C2, C3>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self])
    }

    public static func buildBlock<C0, C1, C2, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>) -> TupleParser<(C0, C1, C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self])
    }

    public static func buildBlock<C0, C1, C2>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>) -> TupleParser<(C0, C1, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self])
    }

    public static func buildBlock<C0, C1, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>) -> TupleParser<(C0, C1, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C1, C3>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>) -> TupleParser<(C0, C1, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self])
    }

    public static func buildBlock<C0, C1, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>) -> TupleParser<(C0, C1, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self])
    }

    public static func buildBlock<C0, C1>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>) -> TupleParser<(C0, C1)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self])
    }

    public static func buildBlock<C0, C2, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>) -> TupleParser<(C0, C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C2, C3>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>) -> TupleParser<(C0, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self])
    }

    public static func buildBlock<C0, C2, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>) -> TupleParser<(C0, C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self])
    }

    public static func buildBlock<C0, C2>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>) -> TupleParser<(C0, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self])
    }

    public static func buildBlock<C0, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>) -> TupleParser<(C0, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C3>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>) -> TupleParser<(C0, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self])
    }

    public static func buildBlock<C0, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>) -> TupleParser<(C0, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self])
    }

    public static func buildBlock<C0>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>) -> TupleParser<C0> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C0.self])
    }

    public static func buildBlock<C1, C2, C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>) -> TupleParser<(C1, C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C1, C2, C3>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>) -> TupleParser<(C1, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self])
    }

    public static func buildBlock<C1, C2, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>) -> TupleParser<(C1, C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self])
    }

    public static func buildBlock<C1, C2>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>) -> TupleParser<(C1, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self])
    }

    public static func buildBlock<C1, C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>) -> TupleParser<(C1, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self])
    }

    public static func buildBlock<C1, C3>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>) -> TupleParser<(C1, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self])
    }

    public static func buildBlock<C1, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>) -> TupleParser<(C1, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self])
    }

    public static func buildBlock<C1>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>) -> TupleParser<C1> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C1.self])
    }

    public static func buildBlock<C2, C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>) -> TupleParser<(C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C2, C3>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>) -> TupleParser<(C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self])
    }

    public static func buildBlock<C2, C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>) -> TupleParser<(C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self])
    }

    public static func buildBlock<C2>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>) -> TupleParser<C2> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C2.self])
    }

    public static func buildBlock<C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>) -> TupleParser<(C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self])
    }

    public static func buildBlock<C3>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>) -> TupleParser<C3> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C3.self])
    }

    public static func buildBlock<C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>) -> TupleParser<C4> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [C4.self])
    }

    public static func buildBlock(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>) -> TupleParser<Void> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder()],
                           outputTypes: [])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>) -> TupleParser<(C0, C1, C2, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>) -> TupleParser<(C0, C1, C2, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self])
    }

    public static func buildBlock<C0, C1, C2, C3>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>) -> TupleParser<(C0, C1, C2, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C1, C2, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self])
    }

    public static func buildBlock<C0, C1, C2, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>) -> TupleParser<(C0, C1, C2, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self])
    }

    public static func buildBlock<C0, C1, C2>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>) -> TupleParser<(C0, C1, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>) -> TupleParser<(C0, C1, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C1, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C1, C3, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>) -> TupleParser<(C0, C1, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self])
    }

    public static func buildBlock<C0, C1, C3>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>) -> TupleParser<(C0, C1, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self])
    }

    public static func buildBlock<C0, C1, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>) -> TupleParser<(C0, C1, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C1, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>) -> TupleParser<(C0, C1, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self])
    }

    public static func buildBlock<C0, C1, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>) -> TupleParser<(C0, C1, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self])
    }

    public static func buildBlock<C0, C1>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>) -> TupleParser<(C0, C1)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>) -> TupleParser<(C0, C2, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C2, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C2, C3, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>) -> TupleParser<(C0, C2, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self])
    }

    public static func buildBlock<C0, C2, C3>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>) -> TupleParser<(C0, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self])
    }

    public static func buildBlock<C0, C2, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>) -> TupleParser<(C0, C2, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C2, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>) -> TupleParser<(C0, C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self])
    }

    public static func buildBlock<C0, C2, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>) -> TupleParser<(C0, C2, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self])
    }

    public static func buildBlock<C0, C2>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>) -> TupleParser<(C0, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self])
    }

    public static func buildBlock<C0, C3, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>) -> TupleParser<(C0, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>) -> TupleParser<(C0, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C3, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>) -> TupleParser<(C0, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self])
    }

    public static func buildBlock<C0, C3>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>) -> TupleParser<(C0, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self])
    }

    public static func buildBlock<C0, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>) -> TupleParser<(C0, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>) -> TupleParser<(C0, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self])
    }

    public static func buildBlock<C0, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>) -> TupleParser<(C0, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self])
    }

    public static func buildBlock<C0>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>) -> TupleParser<C0> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C0.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>) -> TupleParser<(C1, C2, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C1, C2, C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C1, C2, C3, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>) -> TupleParser<(C1, C2, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self])
    }

    public static func buildBlock<C1, C2, C3>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>) -> TupleParser<(C1, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self])
    }

    public static func buildBlock<C1, C2, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>) -> TupleParser<(C1, C2, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self])
    }

    public static func buildBlock<C1, C2, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>) -> TupleParser<(C1, C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self])
    }

    public static func buildBlock<C1, C2, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>) -> TupleParser<(C1, C2, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self])
    }

    public static func buildBlock<C1, C2>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>) -> TupleParser<(C1, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self])
    }

    public static func buildBlock<C1, C3, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>) -> TupleParser<(C1, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C1, C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>) -> TupleParser<(C1, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self])
    }

    public static func buildBlock<C1, C3, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>) -> TupleParser<(C1, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self])
    }

    public static func buildBlock<C1, C3>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>) -> TupleParser<(C1, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self])
    }

    public static func buildBlock<C1, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>) -> TupleParser<(C1, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self])
    }

    public static func buildBlock<C1, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>) -> TupleParser<(C1, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self])
    }

    public static func buildBlock<C1, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>) -> TupleParser<(C1, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self])
    }

    public static func buildBlock<C1>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>) -> TupleParser<C1> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C1.self])
    }

    public static func buildBlock<C2, C3, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>) -> TupleParser<(C2, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C2, C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>) -> TupleParser<(C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C2, C3, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>) -> TupleParser<(C2, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self])
    }

    public static func buildBlock<C2, C3>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>) -> TupleParser<(C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self])
    }

    public static func buildBlock<C2, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>) -> TupleParser<(C2, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self])
    }

    public static func buildBlock<C2, C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>) -> TupleParser<(C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self])
    }

    public static func buildBlock<C2, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>) -> TupleParser<(C2, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self])
    }

    public static func buildBlock<C2>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>) -> TupleParser<C2> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C2.self])
    }

    public static func buildBlock<C3, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>) -> TupleParser<(C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>) -> TupleParser<(C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self])
    }

    public static func buildBlock<C3, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>) -> TupleParser<(C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self])
    }

    public static func buildBlock<C3>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>) -> TupleParser<C3> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C3.self])
    }

    public static func buildBlock<C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>) -> TupleParser<(C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self])
    }

    public static func buildBlock<C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>) -> TupleParser<C4> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C4.self])
    }

    public static func buildBlock<C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>) -> TupleParser<C5> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [C5.self])
    }

    public static func buildBlock(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>) -> TupleParser<Void> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder()],
                           outputTypes: [])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C0, C1, C2, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C0, C1, C2, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C0, C1, C2, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C3>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C0, C1, C2, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C0, C1, C2, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C0, C1, C2, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C0, C1, C2, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self])
    }

    public static func buildBlock<C0, C1, C2, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C0, C1, C2, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C0, C1, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C0, C1, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C0, C1, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C1, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C0, C1, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C3, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C0, C1, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self])
    }

    public static func buildBlock<C0, C1, C3, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C0, C1, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C6.self])
    }

    public static func buildBlock<C0, C1, C3>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C0, C1, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C0, C1, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C0, C1, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C1, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C0, C1, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C1, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C0, C1, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self])
    }

    public static func buildBlock<C0, C1, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C0, C1, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C0, C1, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self])
    }

    public static func buildBlock<C0, C1, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C0, C1, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C6.self])
    }

    public static func buildBlock<C0, C1>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C0, C1)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C0, C2, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C0, C2, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C2, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C0, C2, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C2, C3, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C0, C2, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self])
    }

    public static func buildBlock<C0, C2, C3, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C0, C2, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C6.self])
    }

    public static func buildBlock<C0, C2, C3>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C0, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C0, C2, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C2, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C0, C2, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C2, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C0, C2, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C2, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C0, C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self])
    }

    public static func buildBlock<C0, C2, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C0, C2, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C2, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C0, C2, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self])
    }

    public static func buildBlock<C0, C2, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C0, C2, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C6.self])
    }

    public static func buildBlock<C0, C2>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C0, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C0, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C3, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C0, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C3, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C0, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C0, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C3, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C0, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C3, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C0, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self])
    }

    public static func buildBlock<C0, C3, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C0, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C6.self])
    }

    public static func buildBlock<C0, C3>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C0, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self])
    }

    public static func buildBlock<C0, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C0, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C0, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C0, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C0, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self])
    }

    public static func buildBlock<C0, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C0, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C0, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self])
    }

    public static func buildBlock<C0, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C0, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self, C6.self])
    }

    public static func buildBlock<C0>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<C0> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C0.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C1, C2, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C1, C2, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C1, C2, C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C1, C2, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C2, C3, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C1, C2, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self])
    }

    public static func buildBlock<C1, C2, C3, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C1, C2, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C6.self])
    }

    public static func buildBlock<C1, C2, C3>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C1, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C1, C2, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C2, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C1, C2, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self])
    }

    public static func buildBlock<C1, C2, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C1, C2, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C6.self])
    }

    public static func buildBlock<C1, C2, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C1, C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self])
    }

    public static func buildBlock<C1, C2, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C1, C2, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C2, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C1, C2, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self])
    }

    public static func buildBlock<C1, C2, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C1, C2, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C6.self])
    }

    public static func buildBlock<C1, C2>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C1, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C1, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C3, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C1, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C1, C3, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C1, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C1, C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C1, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self])
    }

    public static func buildBlock<C1, C3, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C1, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C3, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C1, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self])
    }

    public static func buildBlock<C1, C3, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C1, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C6.self])
    }

    public static func buildBlock<C1, C3>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C1, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self])
    }

    public static func buildBlock<C1, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C1, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C1, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self])
    }

    public static func buildBlock<C1, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C1, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C6.self])
    }

    public static func buildBlock<C1, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C1, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self])
    }

    public static func buildBlock<C1, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C1, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C1, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self])
    }

    public static func buildBlock<C1, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C1, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self, C6.self])
    }

    public static func buildBlock<C1>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<C1> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C1.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C2, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C2, C3, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C2, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C2, C3, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C2, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C2, C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C2, C3, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C2, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C2, C3, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C2, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self])
    }

    public static func buildBlock<C2, C3, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C2, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C6.self])
    }

    public static func buildBlock<C2, C3>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self])
    }

    public static func buildBlock<C2, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C2, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C2, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C2, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self])
    }

    public static func buildBlock<C2, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C2, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C6.self])
    }

    public static func buildBlock<C2, C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self])
    }

    public static func buildBlock<C2, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C2, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C6.self])
    }

    public static func buildBlock<C2, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C2, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self])
    }

    public static func buildBlock<C2, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C2, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C2.self, C6.self])
    }

    public static func buildBlock<C2>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<C2> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C2.self])
    }

    public static func buildBlock<C3, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C3, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C3, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<(C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self])
    }

    public static func buildBlock<C3, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C3, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self])
    }

    public static func buildBlock<C3, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C3.self, C6.self])
    }

    public static func buildBlock<C3>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<C3> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C3.self])
    }

    public static func buildBlock<C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<(C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self])
    }

    public static func buildBlock<C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<(C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C4.self, C6.self])
    }

    public static func buildBlock<C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<C4> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C4.self])
    }

    public static func buildBlock<C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>) -> TupleParser<(C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C5.self, C6.self])
    }

    public static func buildBlock<C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>) -> TupleParser<C5> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C5.self])
    }

    public static func buildBlock<C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>) -> TupleParser<C6> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [C6.self])
    }

    public static func buildBlock(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>) -> TupleParser<Void> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder()],
                           outputTypes: [])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C2, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C2, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C2, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C2, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C2, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C2, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C2, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C2, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C2, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C2, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C2, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C2, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C2, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C2, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self])
    }

    public static func buildBlock<C0, C1, C2, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C2, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C2, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C2, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self])
    }

    public static func buildBlock<C0, C1, C3, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C6.self])
    }

    public static func buildBlock<C0, C1, C3, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C1, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C1, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C1, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self])
    }

    public static func buildBlock<C0, C1, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self])
    }

    public static func buildBlock<C0, C1, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C6.self])
    }

    public static func buildBlock<C0, C1, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C1, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C7.self])
    }

    public static func buildBlock<C0, C1>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C1)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C2, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C2, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C2, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C2, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C2, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C2, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C2, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C2, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self])
    }

    public static func buildBlock<C0, C2, C3, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C2, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C2, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C6.self])
    }

    public static func buildBlock<C0, C2, C3, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C2, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C2, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C2, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C2, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C2, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C2, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C2, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C2, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C2, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C2, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C2, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C2, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self])
    }

    public static func buildBlock<C0, C2, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C2, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C2, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C2, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C2, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C2, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C2, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self])
    }

    public static func buildBlock<C0, C2, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C2, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C2, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C6.self])
    }

    public static func buildBlock<C0, C2, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C2, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C7.self])
    }

    public static func buildBlock<C0, C2>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C3, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C3, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C3, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C3, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C3, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C3, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C3, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C3, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self])
    }

    public static func buildBlock<C0, C3, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C3, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C6.self])
    }

    public static func buildBlock<C0, C3, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C7.self])
    }

    public static func buildBlock<C0, C3>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self])
    }

    public static func buildBlock<C0, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self])
    }

    public static func buildBlock<C0, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C0, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self])
    }

    public static func buildBlock<C0, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C0, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C0, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C6.self])
    }

    public static func buildBlock<C0, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C0, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self, C7.self])
    }

    public static func buildBlock<C0>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<C0> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C0.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C1, C2, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C1, C2, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C1, C2, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C1, C2, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C1, C2, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C1, C2, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C1, C2, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C1, C2, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self])
    }

    public static func buildBlock<C1, C2, C3, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C1, C2, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C1, C2, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C6.self])
    }

    public static func buildBlock<C1, C2, C3, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C1, C2, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C1, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C1, C2, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C1, C2, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C1, C2, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C2, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C1, C2, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self])
    }

    public static func buildBlock<C1, C2, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C1, C2, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C1, C2, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C6.self])
    }

    public static func buildBlock<C1, C2, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C1, C2, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C7.self])
    }

    public static func buildBlock<C1, C2, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C1, C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self])
    }

    public static func buildBlock<C1, C2, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C1, C2, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C1, C2, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C2, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C1, C2, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C2, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C1, C2, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self])
    }

    public static func buildBlock<C1, C2, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C1, C2, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C1, C2, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C6.self])
    }

    public static func buildBlock<C1, C2, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C1, C2, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C7.self])
    }

    public static func buildBlock<C1, C2>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C1, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C1, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C1, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C1, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C3, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C1, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C1, C3, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C1, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C3, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C1, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C1, C3, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C1, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C1, C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C1, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self])
    }

    public static func buildBlock<C1, C3, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C1, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C3, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C1, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C3, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C1, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C3, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C1, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self])
    }

    public static func buildBlock<C1, C3, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C1, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C3, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C1, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C6.self])
    }

    public static func buildBlock<C1, C3, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C1, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C7.self])
    }

    public static func buildBlock<C1, C3>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C1, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self])
    }

    public static func buildBlock<C1, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C1, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C1, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C1, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C1, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self])
    }

    public static func buildBlock<C1, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C1, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C1, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C6.self])
    }

    public static func buildBlock<C1, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C1, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C7.self])
    }

    public static func buildBlock<C1, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C1, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self])
    }

    public static func buildBlock<C1, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C1, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C1, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C1, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C1, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self])
    }

    public static func buildBlock<C1, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C1, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C1, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C6.self])
    }

    public static func buildBlock<C1, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C1, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self, C7.self])
    }

    public static func buildBlock<C1>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<C1> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C1.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C2, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C2, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C2, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C2, C3, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C2, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C2, C3, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C2, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C3, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C2, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C2, C3, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C2, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C2, C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C2, C3, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C2, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C3, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C2, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C2, C3, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C2, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C2, C3, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C2, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self])
    }

    public static func buildBlock<C2, C3, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C2, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C3, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C2, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C6.self])
    }

    public static func buildBlock<C2, C3, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C2, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C7.self])
    }

    public static func buildBlock<C2, C3>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self])
    }

    public static func buildBlock<C2, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C2, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C2, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C2, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C2, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C2, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C2, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self])
    }

    public static func buildBlock<C2, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C2, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C2, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C6.self])
    }

    public static func buildBlock<C2, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C2, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C7.self])
    }

    public static func buildBlock<C2, C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self])
    }

    public static func buildBlock<C2, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C2, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C2, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C6.self])
    }

    public static func buildBlock<C2, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C2, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C7.self])
    }

    public static func buildBlock<C2, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C2, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self])
    }

    public static func buildBlock<C2, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C2, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C2, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C6.self])
    }

    public static func buildBlock<C2, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C2, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self, C7.self])
    }

    public static func buildBlock<C2>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<C2> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C2.self])
    }

    public static func buildBlock<C3, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C3, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C3, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C3, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C3, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C3, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C3, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self])
    }

    public static func buildBlock<C3, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C3, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C3, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C3, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self])
    }

    public static func buildBlock<C3, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C3, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C3.self, C6.self])
    }

    public static func buildBlock<C3, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C3.self, C7.self])
    }

    public static func buildBlock<C3>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<C3> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C3.self])
    }

    public static func buildBlock<C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<(C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self])
    }

    public static func buildBlock<C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C4.self, C6.self])
    }

    public static func buildBlock<C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C4.self, C7.self])
    }

    public static func buildBlock<C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<C4> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C4.self])
    }

    public static func buildBlock<C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<(C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C5.self, C6.self])
    }

    public static func buildBlock<C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<(C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C5.self, C7.self])
    }

    public static func buildBlock<C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<C5> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C5.self])
    }

    public static func buildBlock<C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>) -> TupleParser<(C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C6.self, C7.self])
    }

    public static func buildBlock<C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>) -> TupleParser<C6> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C6.self])
    }

    public static func buildBlock<C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>) -> TupleParser<C7> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [C7.self])
    }

    public static func buildBlock(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>) -> TupleParser<Void> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder()],
                           outputTypes: [])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C3, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C3, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C3, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C3, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C3, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C3, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C3, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C3, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C3, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C3, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C3, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C3, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self])
    }

    public static func buildBlock<C0, C1, C2, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C2, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C3, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C3, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C3, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C3, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C3, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C3, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C3, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C3, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C3, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C3, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C3, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C3, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self])
    }

    public static func buildBlock<C0, C1, C3, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C3, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C3, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C6.self])
    }

    public static func buildBlock<C0, C1, C3, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C3, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C3, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C1, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C1, C4, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C4, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C1, C4, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C1, C4, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C8.self])
    }

    public static func buildBlock<C0, C1, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self])
    }

    public static func buildBlock<C0, C1, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C1, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self])
    }

    public static func buildBlock<C0, C1, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C6.self])
    }

    public static func buildBlock<C0, C1, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C7.self])
    }

    public static func buildBlock<C0, C1, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C1, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C8.self])
    }

    public static func buildBlock<C0, C1>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C1)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C3, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C3, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C3, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C3, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C3, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C3, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C3, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C3, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C3, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C3, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C3, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C3, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self])
    }

    public static func buildBlock<C0, C2, C3, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C3, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C3, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C6.self])
    }

    public static func buildBlock<C0, C2, C3, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C3, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C3, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C2, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C2, C4, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C4, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C2, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C2, C4, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C2, C4, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C8.self])
    }

    public static func buildBlock<C0, C2, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self])
    }

    public static func buildBlock<C0, C2, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C2, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C2, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C2, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C2, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self])
    }

    public static func buildBlock<C0, C2, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C2, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C6.self])
    }

    public static func buildBlock<C0, C2, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C7.self])
    }

    public static func buildBlock<C0, C2, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C2, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C8.self])
    }

    public static func buildBlock<C0, C2>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C3, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C3, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C3, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C3, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C3, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C3, C4, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C3, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C3, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C3, C4, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C3, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C3, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C3, C4, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C3, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C3, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C3, C4, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C3, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C8.self])
    }

    public static func buildBlock<C0, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C3, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C3, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C3, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C3, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C3, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C3, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C3, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C3, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C3, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C3, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C3, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C3, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self])
    }

    public static func buildBlock<C0, C3, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C3, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C3, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C3, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C3, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C3, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C6.self])
    }

    public static func buildBlock<C0, C3, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C3, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C3, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C7.self])
    }

    public static func buildBlock<C0, C3, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C3, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C8.self])
    }

    public static func buildBlock<C0, C3>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self])
    }

    public static func buildBlock<C0, C4, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C4, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C4, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C4, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C4, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C4, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C4, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C4, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C8.self])
    }

    public static func buildBlock<C0, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self])
    }

    public static func buildBlock<C0, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self])
    }

    public static func buildBlock<C0, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C0, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C6.self])
    }

    public static func buildBlock<C0, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C0, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C0, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C7.self])
    }

    public static func buildBlock<C0, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C0, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self, C8.self])
    }

    public static func buildBlock<C0>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<C0> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C0.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C3, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C3, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C3, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C3, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C3, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C3, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C3, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C3, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C3, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C3, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C3, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C3, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self])
    }

    public static func buildBlock<C1, C2, C3, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C3, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C3, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C6.self])
    }

    public static func buildBlock<C1, C2, C3, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C3, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C3, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C1, C2, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self])
    }

    public static func buildBlock<C1, C2, C4, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C4, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C2, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C6.self])
    }

    public static func buildBlock<C1, C2, C4, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C7.self])
    }

    public static func buildBlock<C1, C2, C4, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C8.self])
    }

    public static func buildBlock<C1, C2, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self])
    }

    public static func buildBlock<C1, C2, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C2, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C2, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C2, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C8.self])
    }

    public static func buildBlock<C1, C2, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self])
    }

    public static func buildBlock<C1, C2, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C2, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C6.self])
    }

    public static func buildBlock<C1, C2, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C7.self])
    }

    public static func buildBlock<C1, C2, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C2, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C8.self])
    }

    public static func buildBlock<C1, C2>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C3, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C3, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C3, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C3, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C1, C3, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C1, C3, C4, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C3, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C3, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C3, C4, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C3, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C3, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C1, C3, C4, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C3, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C3, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C1, C3, C4, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C3, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C8.self])
    }

    public static func buildBlock<C1, C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self])
    }

    public static func buildBlock<C1, C3, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C3, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C3, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C3, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C3, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C3, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C3, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C3, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C3, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C3, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C3, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C8.self])
    }

    public static func buildBlock<C1, C3, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self])
    }

    public static func buildBlock<C1, C3, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C3, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C3, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C3, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C3, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C3, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C6.self])
    }

    public static func buildBlock<C1, C3, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C3, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C3, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C7.self])
    }

    public static func buildBlock<C1, C3, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C3, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C8.self])
    }

    public static func buildBlock<C1, C3>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self])
    }

    public static func buildBlock<C1, C4, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C4, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C4, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C4, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C1, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self])
    }

    public static func buildBlock<C1, C4, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C4, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C6.self])
    }

    public static func buildBlock<C1, C4, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C7.self])
    }

    public static func buildBlock<C1, C4, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C8.self])
    }

    public static func buildBlock<C1, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self])
    }

    public static func buildBlock<C1, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C8.self])
    }

    public static func buildBlock<C1, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self])
    }

    public static func buildBlock<C1, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C1, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C6.self])
    }

    public static func buildBlock<C1, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C1, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C1, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C7.self])
    }

    public static func buildBlock<C1, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C1, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self, C8.self])
    }

    public static func buildBlock<C1>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<C1> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C1.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C2, C3, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C2, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C2, C3, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C2, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C2, C3, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C2, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C2, C3, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C2, C3, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C2, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C2, C3, C4, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C2, C3, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C3, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C2, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C3, C4, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C2, C3, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C2, C3, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C2, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C2, C3, C4, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C2, C3, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C3, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C2, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C2, C3, C4, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C2, C3, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C8.self])
    }

    public static func buildBlock<C2, C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C2, C3, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C2, C3, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C3, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C2, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C3, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C2, C3, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C2, C3, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C2, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C2, C3, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C2, C3, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C3, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C2, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C2, C3, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C2, C3, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C8.self])
    }

    public static func buildBlock<C2, C3, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C2, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self])
    }

    public static func buildBlock<C2, C3, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C2, C3, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C3, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C2, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C3, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C2, C3, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C6.self, C8.self])
    }

    public static func buildBlock<C2, C3, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C2, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C6.self])
    }

    public static func buildBlock<C2, C3, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C2, C3, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C3, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C2, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C7.self])
    }

    public static func buildBlock<C2, C3, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C2, C3, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C8.self])
    }

    public static func buildBlock<C2, C3>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self])
    }

    public static func buildBlock<C2, C4, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C2, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C2, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C4, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C2, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C2, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C2, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C2, C4, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C2, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C2, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C2, C4, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C2, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C2, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C2, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self])
    }

    public static func buildBlock<C2, C4, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C2, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C2, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C4, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C2, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C2, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C2, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C6.self])
    }

    public static func buildBlock<C2, C4, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C2, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C2, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C7.self])
    }

    public static func buildBlock<C2, C4, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C2, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C8.self])
    }

    public static func buildBlock<C2, C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self])
    }

    public static func buildBlock<C2, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C2, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C2, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C2, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C2, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C2, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C6.self])
    }

    public static func buildBlock<C2, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C2, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C2, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C7.self])
    }

    public static func buildBlock<C2, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C2, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C8.self])
    }

    public static func buildBlock<C2, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C2, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self])
    }

    public static func buildBlock<C2, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C2, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C2, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C2, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C6.self, C8.self])
    }

    public static func buildBlock<C2, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C2, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C6.self])
    }

    public static func buildBlock<C2, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C2, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C2, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C7.self])
    }

    public static func buildBlock<C2, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C2, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self, C8.self])
    }

    public static func buildBlock<C2>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<C2> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C2.self])
    }

    public static func buildBlock<C3, C4, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C3, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C3, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C3, C4, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C3, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C3, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C3, C4, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C3, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C3, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C3, C4, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C3, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C3, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C3, C4, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C3, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C3, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C3, C4, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C3, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C3, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C3, C4, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C3, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C3, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C3, C4, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C3, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C8.self])
    }

    public static func buildBlock<C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self])
    }

    public static func buildBlock<C3, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C3, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C3, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C3, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C3, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C3, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C3, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C3, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C3, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C3, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C3, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C8.self])
    }

    public static func buildBlock<C3, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self])
    }

    public static func buildBlock<C3, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C3, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C3, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C3, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C3, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C6.self, C8.self])
    }

    public static func buildBlock<C3, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C6.self])
    }

    public static func buildBlock<C3, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C3, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C7.self, C8.self])
    }

    public static func buildBlock<C3, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C7.self])
    }

    public static func buildBlock<C3, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C3, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self, C8.self])
    }

    public static func buildBlock<C3>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<C3> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C3.self])
    }

    public static func buildBlock<C4, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C4, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C4, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C4, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self])
    }

    public static func buildBlock<C4, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C4, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C4.self, C6.self])
    }

    public static func buildBlock<C4, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C4.self, C7.self])
    }

    public static func buildBlock<C4, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C4.self, C8.self])
    }

    public static func buildBlock<C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<C4> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C4.self])
    }

    public static func buildBlock<C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<(C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C5.self, C6.self])
    }

    public static func buildBlock<C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C5.self, C7.self])
    }

    public static func buildBlock<C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C5.self, C8.self])
    }

    public static func buildBlock<C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<C5> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C5.self])
    }

    public static func buildBlock<C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<(C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C6.self, C7.self])
    }

    public static func buildBlock<C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<(C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C6.self, C8.self])
    }

    public static func buildBlock<C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<C6> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C6.self])
    }

    public static func buildBlock<C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>) -> TupleParser<(C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C7.self, C8.self])
    }

    public static func buildBlock<C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>) -> TupleParser<C7> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C7.self])
    }

    public static func buildBlock<C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>) -> TupleParser<C8> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [C8.self])
    }

    public static func buildBlock(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>) -> TupleParser<Void> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder()],
                           outputTypes: [])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C4, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C4, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C4, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C4, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C4, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C4, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C4, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C4, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C4, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C5.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C3, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C3, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C3>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C3.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C4, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C4, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C4, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C4, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C4, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C4, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C4, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C4, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C4, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C4, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C4, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C4, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C4, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C4, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C4, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C4, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C4, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C4.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C5, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C5.self])
    }

    public static func buildBlock<C0, C1, C2, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C6.self])
    }

    public static func buildBlock<C0, C1, C2, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C7.self])
    }

    public static func buildBlock<C0, C1, C2, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C8.self])
    }

    public static func buildBlock<C0, C1, C2, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C2, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self, C9.self])
    }

    public static func buildBlock<C0, C1, C2>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C2.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C4, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C4, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C4, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C4, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C4, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C4, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C4, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C4, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C4, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C4, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C4, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C4, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C4, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C4, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C4, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C4, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C4, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C5, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C5.self])
    }

    public static func buildBlock<C0, C1, C3, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C6.self])
    }

    public static func buildBlock<C0, C1, C3, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C7.self])
    }

    public static func buildBlock<C0, C1, C3, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C8.self])
    }

    public static func buildBlock<C0, C1, C3, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C3, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self, C9.self])
    }

    public static func buildBlock<C0, C1, C3>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C3.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C4, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C4, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C4, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C4, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C4, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C4, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C4, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C1, C4, C5, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C4, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self, C9.self])
    }

    public static func buildBlock<C0, C1, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C1, C4, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C4, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C4, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C4, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C4, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C4, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C4, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C4, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C4, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C4, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C1, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C1, C4, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C4, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C4, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C4, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C4, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C1, C4, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C4, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C4, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C8.self])
    }

    public static func buildBlock<C0, C1, C4, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C4, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self, C9.self])
    }

    public static func buildBlock<C0, C1, C4>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C4.self])
    }

    public static func buildBlock<C0, C1, C5, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C5, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C5, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C5, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C1, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C1, C5, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C5, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C1, C5, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C1, C5, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self, C9.self])
    }

    public static func buildBlock<C0, C1, C5>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C5.self])
    }

    public static func buildBlock<C0, C1, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C1, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C1, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C1, C6>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C6.self])
    }

    public static func buildBlock<C0, C1, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C1, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C1, C7>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C7.self])
    }

    public static func buildBlock<C0, C1, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C1, C8>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C8.self])
    }

    public static func buildBlock<C0, C1, C9>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C1, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self, C9.self])
    }

    public static func buildBlock<C0, C1>(_ c0: any Parser<C0>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C1)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C1.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C4, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C4, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C4, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C4, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C4, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C4, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C4, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C4, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C4, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C4, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C4, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C4, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C4, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C4, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C4, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C4, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C4, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C5, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C5.self])
    }

    public static func buildBlock<C0, C2, C3, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C6.self])
    }

    public static func buildBlock<C0, C2, C3, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C7.self])
    }

    public static func buildBlock<C0, C2, C3, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C8.self])
    }

    public static func buildBlock<C0, C2, C3, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C3, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self, C9.self])
    }

    public static func buildBlock<C0, C2, C3>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C3.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C4, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C4, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C4, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C4, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C4, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C4, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C4, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C2, C4, C5, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C4, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self, C9.self])
    }

    public static func buildBlock<C0, C2, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C2, C4, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C4, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C4, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C4, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C4, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C2, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C4, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C4, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C4, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C2, C4, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C4, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C2, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C2, C4, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C4, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C4, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C4, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C4, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C2, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C2, C4, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C4, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C4, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C8.self])
    }

    public static func buildBlock<C0, C2, C4, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C4, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self, C9.self])
    }

    public static func buildBlock<C0, C2, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C4.self])
    }

    public static func buildBlock<C0, C2, C5, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C5, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C2, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C5, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C2, C5, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C2, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C2, C5, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C5, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C2, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C2, C5, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C2, C5, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self, C9.self])
    }

    public static func buildBlock<C0, C2, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C5.self])
    }

    public static func buildBlock<C0, C2, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C2, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C2, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C2, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C2, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C6.self])
    }

    public static func buildBlock<C0, C2, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C2, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C2, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C7.self])
    }

    public static func buildBlock<C0, C2, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C2, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C8.self])
    }

    public static func buildBlock<C0, C2, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C2, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self, C9.self])
    }

    public static func buildBlock<C0, C2>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C2.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C4, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C4, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C4, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C4, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C4, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C4, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C4, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C3, C4, C5, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C4, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self, C9.self])
    }

    public static func buildBlock<C0, C3, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C3, C4, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C4, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C3, C4, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C3, C4, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C4, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C3, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C3, C4, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C4, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C3, C4, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C3, C4, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C4, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C3, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C3, C4, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C4, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C3, C4, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C3, C4, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C4, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C3, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C3, C4, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C4, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C3, C4, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C8.self])
    }

    public static func buildBlock<C0, C3, C4, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C4, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self, C9.self])
    }

    public static func buildBlock<C0, C3, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C4.self])
    }

    public static func buildBlock<C0, C3, C5, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C3, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C3, C5, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C3, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C3, C5, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C3, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C3, C5, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C3, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C3, C5, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C3, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C3, C5, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C3, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C3, C5, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C3, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C3, C5, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self, C9.self])
    }

    public static func buildBlock<C0, C3, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C5.self])
    }

    public static func buildBlock<C0, C3, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C3, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C3, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C3, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C3, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C3, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C3, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C3, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C6.self])
    }

    public static func buildBlock<C0, C3, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C3, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C3, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C3, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C7.self])
    }

    public static func buildBlock<C0, C3, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C3, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C8.self])
    }

    public static func buildBlock<C0, C3, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C3, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self, C9.self])
    }

    public static func buildBlock<C0, C3>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C3.self])
    }

    public static func buildBlock<C0, C4, C5, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C4, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C4, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C4, C5, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C4, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C4, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C4, C5, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C4, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C4, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C4, C5, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C4, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C4, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C4, C5, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C4, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C4, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C4, C5, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C4, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C4, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C4, C5, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C4, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C4, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C4, C5, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C4, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self, C9.self])
    }

    public static func buildBlock<C0, C4, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C5.self])
    }

    public static func buildBlock<C0, C4, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C4, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C4, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C4, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C4, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C4, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C4, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C4, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C4, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C4, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C4, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C4, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C6.self])
    }

    public static func buildBlock<C0, C4, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C4, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C4, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C4, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C4, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C4, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C7.self])
    }

    public static func buildBlock<C0, C4, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C4, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C4, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C8.self])
    }

    public static func buildBlock<C0, C4, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C4, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self, C9.self])
    }

    public static func buildBlock<C0, C4>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C4.self])
    }

    public static func buildBlock<C0, C5, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C5, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C5, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C5, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C5, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C5, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C5, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C5, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C6.self])
    }

    public static func buildBlock<C0, C5, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C5, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C5, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C5, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C7.self])
    }

    public static func buildBlock<C0, C5, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C5, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C8.self])
    }

    public static func buildBlock<C0, C5, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self, C9.self])
    }

    public static func buildBlock<C0, C5>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C5.self])
    }

    public static func buildBlock<C0, C6, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C6, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C6, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C6, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C6.self, C7.self])
    }

    public static func buildBlock<C0, C6, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C6, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C6.self, C8.self])
    }

    public static func buildBlock<C0, C6, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C6.self, C9.self])
    }

    public static func buildBlock<C0, C6>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C6.self])
    }

    public static func buildBlock<C0, C7, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C7, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C7.self, C8.self])
    }

    public static func buildBlock<C0, C7, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C7.self, C9.self])
    }

    public static func buildBlock<C0, C7>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C0, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C7.self])
    }

    public static func buildBlock<C0, C8, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C0, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C8.self, C9.self])
    }

    public static func buildBlock<C0, C8>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C0, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C8.self])
    }

    public static func buildBlock<C0, C9>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C0, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self, C9.self])
    }

    public static func buildBlock<C0>(_ c0: any Parser<C0>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<C0> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C0.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C4, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C4, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C4, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C4, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C4, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C4, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C4, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C4, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C4, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C4, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C4, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C4, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C6.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C4, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C4, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C4, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C4, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C4, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C5, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C5.self])
    }

    public static func buildBlock<C1, C2, C3, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C6.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C6.self])
    }

    public static func buildBlock<C1, C2, C3, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C7.self])
    }

    public static func buildBlock<C1, C2, C3, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C8.self])
    }

    public static func buildBlock<C1, C2, C3, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C3, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self, C9.self])
    }

    public static func buildBlock<C1, C2, C3>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C3.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C4, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C4, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C4, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C4, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C4, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C4, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C4, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C1, C2, C4, C5, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C4, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self, C9.self])
    }

    public static func buildBlock<C1, C2, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C5.self])
    }

    public static func buildBlock<C1, C2, C4, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C4, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C4, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C4, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C4, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C2, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C4, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C4, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C4, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C2, C4, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C4, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C6.self, C9.self])
    }

    public static func buildBlock<C1, C2, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C6.self])
    }

    public static func buildBlock<C1, C2, C4, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C4, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C4, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C4, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C4, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C2, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C7.self])
    }

    public static func buildBlock<C1, C2, C4, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C4, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C4, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C8.self])
    }

    public static func buildBlock<C1, C2, C4, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C4, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self, C9.self])
    }

    public static func buildBlock<C1, C2, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C4.self])
    }

    public static func buildBlock<C1, C2, C5, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C5, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C2, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C5, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C2, C5, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C1, C2, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C2, C5, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C5, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C2, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C2, C5, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C8.self])
    }

    public static func buildBlock<C1, C2, C5, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self, C9.self])
    }

    public static func buildBlock<C1, C2, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C5.self])
    }

    public static func buildBlock<C1, C2, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C2, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C2, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C2, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C6.self, C9.self])
    }

    public static func buildBlock<C1, C2, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C6.self])
    }

    public static func buildBlock<C1, C2, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C2, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C2, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C7.self])
    }

    public static func buildBlock<C1, C2, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C2, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C8.self])
    }

    public static func buildBlock<C1, C2, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C2, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self, C9.self])
    }

    public static func buildBlock<C1, C2>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C2)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C2.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C4, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C4, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C4, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C4, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C4, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C4, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C4, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C1, C3, C4, C5, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C4, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self, C9.self])
    }

    public static func buildBlock<C1, C3, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C1, C3, C4, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C4, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C3, C4, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C3, C4, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C4, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C3, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C3, C4, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C4, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C3, C4, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C3, C4, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C4, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C6.self, C9.self])
    }

    public static func buildBlock<C1, C3, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C1, C3, C4, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C4, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C3, C4, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C3, C4, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C4, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C3, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C1, C3, C4, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C4, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C3, C4, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C8.self])
    }

    public static func buildBlock<C1, C3, C4, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C4, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self, C9.self])
    }

    public static func buildBlock<C1, C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C4.self])
    }

    public static func buildBlock<C1, C3, C5, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C3, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C3, C5, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C3, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C3, C5, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C3, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C3, C5, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C1, C3, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C3, C5, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C3, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C3, C5, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C3, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C3, C5, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C3, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C8.self])
    }

    public static func buildBlock<C1, C3, C5, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self, C9.self])
    }

    public static func buildBlock<C1, C3, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C5.self])
    }

    public static func buildBlock<C1, C3, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C3, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C3, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C3, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C3, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C3, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C3, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C6.self, C9.self])
    }

    public static func buildBlock<C1, C3, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C6.self])
    }

    public static func buildBlock<C1, C3, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C3, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C3, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C3, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C7.self])
    }

    public static func buildBlock<C1, C3, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C3, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C8.self])
    }

    public static func buildBlock<C1, C3, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C3, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self, C9.self])
    }

    public static func buildBlock<C1, C3>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C3.self])
    }

    public static func buildBlock<C1, C4, C5, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C4, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C4, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C4, C5, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C4, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C4, C5, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C4, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C4, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C4, C5, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C4, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C1, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C4, C5, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C4, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C4, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C4, C5, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C4, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C4, C5, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C4, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C4, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C1, C4, C5, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C4, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self, C9.self])
    }

    public static func buildBlock<C1, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C5.self])
    }

    public static func buildBlock<C1, C4, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C4, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C4, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C4, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C4, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C4, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C4, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C4, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C4, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C4, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C6.self, C9.self])
    }

    public static func buildBlock<C1, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C6.self])
    }

    public static func buildBlock<C1, C4, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C4, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C4, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C4, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C4, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C7.self])
    }

    public static func buildBlock<C1, C4, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C4, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C4, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C8.self])
    }

    public static func buildBlock<C1, C4, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C4, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self, C9.self])
    }

    public static func buildBlock<C1, C4>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C4.self])
    }

    public static func buildBlock<C1, C5, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C5, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C5, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C5, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C1, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C6.self])
    }

    public static func buildBlock<C1, C5, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C5, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C7.self])
    }

    public static func buildBlock<C1, C5, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C8.self])
    }

    public static func buildBlock<C1, C5, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self, C9.self])
    }

    public static func buildBlock<C1, C5>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C5.self])
    }

    public static func buildBlock<C1, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C6.self, C7.self])
    }

    public static func buildBlock<C1, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C6.self, C8.self])
    }

    public static func buildBlock<C1, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C6.self, C9.self])
    }

    public static func buildBlock<C1, C6>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C6.self])
    }

    public static func buildBlock<C1, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C7.self, C8.self])
    }

    public static func buildBlock<C1, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C7.self, C9.self])
    }

    public static func buildBlock<C1, C7>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C1, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C7.self])
    }

    public static func buildBlock<C1, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C1, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C8.self, C9.self])
    }

    public static func buildBlock<C1, C8>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C1, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C8.self])
    }

    public static func buildBlock<C1, C9>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C1, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self, C9.self])
    }

    public static func buildBlock<C1>(_ c0: any Parser<Void>, _ c1: any Parser<C1>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<C1> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C1.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C4, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C4, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C4, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C4, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C4, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C4, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C4, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C2, C3, C4, C5, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C4, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self, C9.self])
    }

    public static func buildBlock<C2, C3, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C2, C3, C4, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C4, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C3, C4, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C3, C4, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C4, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C2, C3, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C3, C4, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C4, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C3, C4, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C2, C3, C4, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C4, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C6.self, C9.self])
    }

    public static func buildBlock<C2, C3, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C2, C3, C4, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C4, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C3, C4, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C3, C4, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C4, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C7.self, C9.self])
    }

    public static func buildBlock<C2, C3, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C2, C3, C4, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C4, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C3, C4, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C8.self])
    }

    public static func buildBlock<C2, C3, C4, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C4, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self, C9.self])
    }

    public static func buildBlock<C2, C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C4.self])
    }

    public static func buildBlock<C2, C3, C5, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C3, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C3, C5, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C2, C3, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C3, C5, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C3, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C2, C3, C5, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C2, C3, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C2, C3, C5, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C3, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C3, C5, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C2, C3, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C2, C3, C5, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C3, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C8.self])
    }

    public static func buildBlock<C2, C3, C5, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self, C9.self])
    }

    public static func buildBlock<C2, C3, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C5.self])
    }

    public static func buildBlock<C2, C3, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C3, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C3, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C2, C3, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C3, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C3, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C6.self, C8.self])
    }

    public static func buildBlock<C2, C3, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C6.self, C9.self])
    }

    public static func buildBlock<C2, C3, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C6.self])
    }

    public static func buildBlock<C2, C3, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C3, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C3, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C7.self, C9.self])
    }

    public static func buildBlock<C2, C3, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C7.self])
    }

    public static func buildBlock<C2, C3, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C3, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C8.self])
    }

    public static func buildBlock<C2, C3, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C3, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self, C9.self])
    }

    public static func buildBlock<C2, C3>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C3)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C3.self])
    }

    public static func buildBlock<C2, C4, C5, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C4, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C4, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C4, C5, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C4, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C2, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C4, C5, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C4, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C4, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C2, C4, C5, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C4, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C2, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C2, C4, C5, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C4, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C4, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C4, C5, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C4, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C2, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C2, C4, C5, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C4, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C4, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C2, C4, C5, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C4, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self, C9.self])
    }

    public static func buildBlock<C2, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C5.self])
    }

    public static func buildBlock<C2, C4, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C4, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C4, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C4, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C4, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C2, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C4, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C4, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C4, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C2, C4, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C4, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C6.self, C9.self])
    }

    public static func buildBlock<C2, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C6.self])
    }

    public static func buildBlock<C2, C4, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C4, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C4, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C4, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C4, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C7.self, C9.self])
    }

    public static func buildBlock<C2, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C7.self])
    }

    public static func buildBlock<C2, C4, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C4, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C4, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C8.self])
    }

    public static func buildBlock<C2, C4, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C4, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self, C9.self])
    }

    public static func buildBlock<C2, C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C4.self])
    }

    public static func buildBlock<C2, C5, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C5, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C2, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C5, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C2, C5, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C2, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C6.self])
    }

    public static func buildBlock<C2, C5, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C5, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C2, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C7.self])
    }

    public static func buildBlock<C2, C5, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C8.self])
    }

    public static func buildBlock<C2, C5, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self, C9.self])
    }

    public static func buildBlock<C2, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C5.self])
    }

    public static func buildBlock<C2, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C2, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C6.self, C7.self])
    }

    public static func buildBlock<C2, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C6.self, C8.self])
    }

    public static func buildBlock<C2, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C6.self, C9.self])
    }

    public static func buildBlock<C2, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C6.self])
    }

    public static func buildBlock<C2, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C7.self, C8.self])
    }

    public static func buildBlock<C2, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C7.self, C9.self])
    }

    public static func buildBlock<C2, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C2, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C7.self])
    }

    public static func buildBlock<C2, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C2, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C8.self, C9.self])
    }

    public static func buildBlock<C2, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C2, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C8.self])
    }

    public static func buildBlock<C2, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C2, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self, C9.self])
    }

    public static func buildBlock<C2>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<C2>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<C2> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C2.self])
    }

    public static func buildBlock<C3, C4, C5, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C3, C4, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C3, C4, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C3, C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C3, C4, C5, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C3, C4, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C3, C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C3, C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C3, C4, C5, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C3, C4, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C3, C4, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C3, C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C3, C4, C5, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C3, C4, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C3, C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C3, C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C3, C4, C5, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C3, C4, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C3, C4, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C3, C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C3, C4, C5, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C3, C4, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C3, C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C3, C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C3, C4, C5, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C3, C4, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C3, C4, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C3, C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C3, C4, C5, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C3, C4, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self, C9.self])
    }

    public static func buildBlock<C3, C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C3, C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C5.self])
    }

    public static func buildBlock<C3, C4, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C3, C4, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C3, C4, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C3, C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C3, C4, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C3, C4, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C3, C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C3, C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C3, C4, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C3, C4, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C3, C4, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C3, C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C3, C4, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C3, C4, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C6.self, C9.self])
    }

    public static func buildBlock<C3, C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C3, C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C6.self])
    }

    public static func buildBlock<C3, C4, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C3, C4, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C3, C4, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C3, C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C3, C4, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C3, C4, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C7.self, C9.self])
    }

    public static func buildBlock<C3, C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C3, C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C7.self])
    }

    public static func buildBlock<C3, C4, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C3, C4, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C8.self, C9.self])
    }

    public static func buildBlock<C3, C4, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C3, C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C8.self])
    }

    public static func buildBlock<C3, C4, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C3, C4, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self, C9.self])
    }

    public static func buildBlock<C3, C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C3, C4)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C4.self])
    }

    public static func buildBlock<C3, C5, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C3, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C3, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C3, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C3, C5, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C3, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C3, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C3, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C3, C5, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C3, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C3, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C3, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C3, C5, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C3, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C3, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C3, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C6.self])
    }

    public static func buildBlock<C3, C5, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C3, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C3, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C3, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C3, C5, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C3, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C3, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C3, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C7.self])
    }

    public static func buildBlock<C3, C5, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C3, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C3, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C3, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C8.self])
    }

    public static func buildBlock<C3, C5, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C3, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self, C9.self])
    }

    public static func buildBlock<C3, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C3, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C5.self])
    }

    public static func buildBlock<C3, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C3, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C3, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C3, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C3, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C3, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C3, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C3, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C6.self, C7.self])
    }

    public static func buildBlock<C3, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C3, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C3, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C3, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C6.self, C8.self])
    }

    public static func buildBlock<C3, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C3, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C6.self, C9.self])
    }

    public static func buildBlock<C3, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C3, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C6.self])
    }

    public static func buildBlock<C3, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C3, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C3, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C3, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C7.self, C8.self])
    }

    public static func buildBlock<C3, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C3, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C7.self, C9.self])
    }

    public static func buildBlock<C3, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C3, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C7.self])
    }

    public static func buildBlock<C3, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C3, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C8.self, C9.self])
    }

    public static func buildBlock<C3, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C3, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C8.self])
    }

    public static func buildBlock<C3, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C3, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self, C9.self])
    }

    public static func buildBlock<C3>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<C3>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<C3> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C3.self])
    }

    public static func buildBlock<C4, C5, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C4, C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C4, C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C4, C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C4, C5, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C4, C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C4, C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C4, C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C4, C5, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C4, C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C4, C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C4, C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C4, C5, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C4, C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C4, C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C4, C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C6.self])
    }

    public static func buildBlock<C4, C5, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C4, C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C4, C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C4, C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C4, C5, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C4, C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C4, C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C4, C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C7.self])
    }

    public static func buildBlock<C4, C5, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C4, C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C4, C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C4, C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C8.self])
    }

    public static func buildBlock<C4, C5, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C4, C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self, C9.self])
    }

    public static func buildBlock<C4, C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C4, C5)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C5.self])
    }

    public static func buildBlock<C4, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C4, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C4, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C4, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C4, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C4, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C4, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C4, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C6.self, C7.self])
    }

    public static func buildBlock<C4, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C4, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C4, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C4, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C6.self, C8.self])
    }

    public static func buildBlock<C4, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C4, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C6.self, C9.self])
    }

    public static func buildBlock<C4, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C4, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C6.self])
    }

    public static func buildBlock<C4, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C4, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C4, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C4, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C7.self, C8.self])
    }

    public static func buildBlock<C4, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C4, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C7.self, C9.self])
    }

    public static func buildBlock<C4, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C4, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C7.self])
    }

    public static func buildBlock<C4, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C4, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C8.self, C9.self])
    }

    public static func buildBlock<C4, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C4, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C8.self])
    }

    public static func buildBlock<C4, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C4, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self, C9.self])
    }

    public static func buildBlock<C4>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<C4>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<C4> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C4.self])
    }

    public static func buildBlock<C5, C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C5, C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C5.self, C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C5, C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C5, C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C5.self, C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C5, C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C5, C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C5.self, C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C5, C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C5, C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C5.self, C6.self, C7.self])
    }

    public static func buildBlock<C5, C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C5, C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C5.self, C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C5, C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C5, C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C5.self, C6.self, C8.self])
    }

    public static func buildBlock<C5, C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C5, C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C5.self, C6.self, C9.self])
    }

    public static func buildBlock<C5, C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C5, C6)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C5.self, C6.self])
    }

    public static func buildBlock<C5, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C5, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C5.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C5, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C5, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C5.self, C7.self, C8.self])
    }

    public static func buildBlock<C5, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C5, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C5.self, C7.self, C9.self])
    }

    public static func buildBlock<C5, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C5, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C5.self, C7.self])
    }

    public static func buildBlock<C5, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C5, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C5.self, C8.self, C9.self])
    }

    public static func buildBlock<C5, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C5, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C5.self, C8.self])
    }

    public static func buildBlock<C5, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C5, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C5.self, C9.self])
    }

    public static func buildBlock<C5>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<C5>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<C5> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C5.self])
    }

    public static func buildBlock<C6, C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C6, C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C6.self, C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C6, C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C6, C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C6.self, C7.self, C8.self])
    }

    public static func buildBlock<C6, C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C6, C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C6.self, C7.self, C9.self])
    }

    public static func buildBlock<C6, C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<(C6, C7)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C6.self, C7.self])
    }

    public static func buildBlock<C6, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C6, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C6.self, C8.self, C9.self])
    }

    public static func buildBlock<C6, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C6, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C6.self, C8.self])
    }

    public static func buildBlock<C6, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C6, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C6.self, C9.self])
    }

    public static func buildBlock<C6>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<C6>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<C6> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C6.self])
    }

    public static func buildBlock<C7, C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C7, C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C7.self, C8.self, C9.self])
    }

    public static func buildBlock<C7, C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<(C7, C8)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C7.self, C8.self])
    }

    public static func buildBlock<C7, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<(C7, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C7.self, C9.self])
    }

    public static func buildBlock<C7>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<C7>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<C7> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C7.self])
    }

    public static func buildBlock<C8, C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<C9>) -> TupleParser<(C8, C9)> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C8.self, C9.self])
    }

    public static func buildBlock<C8>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<C8>, _ c9: any Parser<Void>) -> TupleParser<C8> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C8.self])
    }

    public static func buildBlock<C9>(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<C9>) -> TupleParser<C9> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [C9.self])
    }

    public static func buildBlock(_ c0: any Parser<Void>, _ c1: any Parser<Void>, _ c2: any Parser<Void>, _ c3: any Parser<Void>, _ c4: any Parser<Void>, _ c5: any Parser<Void>, _ c6: any Parser<Void>, _ c7: any Parser<Void>, _ c8: any Parser<Void>, _ c9: any Parser<Void>) -> TupleParser<Void> {
        return TupleParser(builders: [c0.internalParserBuilder(), c1.internalParserBuilder(), c2.internalParserBuilder(), c3.internalParserBuilder(), c4.internalParserBuilder(), c5.internalParserBuilder(), c6.internalParserBuilder(), c7.internalParserBuilder(), c8.internalParserBuilder(), c9.internalParserBuilder()],
                           outputTypes: [])
    }

}
